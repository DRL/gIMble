['MISS', 'HOMREF', 'HOMALT', 'HET']

def subsets(iterable, size):
    for n in range(1, size+1):
        yield from itertools.combinations_with_replacement(iterable, n)

[()
('MISS',)
('HOMREF',)
('HOMALT',)
('HET',)
('MISS', 'MISS')
('MISS', 'HOMREF')
('MISS', 'HOMALT')
('MISS', 'HET')
('HOMREF', 'HOMREF')
('HOMREF', 'HOMALT')
('HOMREF', 'HET')
('HOMALT', 'HOMALT')
('HOMALT', 'HET')
('HET', 'HET')
('MISS', 'MISS', 'MISS')
('MISS', 'MISS', 'HOMREF')
('MISS', 'MISS', 'HOMALT')
('MISS', 'MISS', 'HET')
('MISS', 'HOMREF', 'HOMREF')
('MISS', 'HOMREF', 'HOMALT')
('MISS', 'HOMREF', 'HET')
('MISS', 'HOMALT', 'HOMALT')
('MISS', 'HOMALT', 'HET')
('MISS', 'HET', 'HET')
('HOMREF', 'HOMREF', 'HOMREF')
('HOMREF', 'HOMREF', 'HOMALT')
('HOMREF', 'HOMREF', 'HET')
('HOMREF', 'HOMALT', 'HOMALT')
('HOMREF', 'HOMALT', 'HET')
('HOMREF', 'HET', 'HET')
('HOMALT', 'HOMALT', 'HOMALT')
('HOMALT', 'HOMALT', 'HET')
('HOMALT', 'HET', 'HET')
('HET', 'HET', 'HET')]



for status in list(subsets(['MISS', 'HOMREF', 'HOMALT', 'HET'], 3)):
    if any([s == 'MISS' for s in status]):
        print('MISS', status)
    elif any([s == 'HET' for s in status]):
        print('HET', status)
    elif all([s == 'HOMREF' for s in status]):
        print('HOMREF', status)
    elif not any([s == 'HET' for s in status]):
        print('NOT HET', status)
    
    else:
        print('NOT ASSIGNED', status)

pos = np.array([4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16])
pos.reshape((-1,3))
array([[ 4,  5,  6],
       [ 7,  8,  9],
       [11, 12, 13],
       [14, 15, 16]])

pos = np.array([4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16])
gt_pos = np.array([5, 9, 11, 15, 16])
import allel
genotype = allel.GenotypeArray([
    [[0,0], [0,1], [1,1]],
    [[1,1], [0,1], [0,0]],
    [[1,1], [0,1], [2,2]],
    [[1,1], [1,1], [0,0]],
    [[1,1], [-1,-1], [0,0]]])
ref = np.array(list('ATGGGGGAGGAT'))
alt = np.array([["G", ""], ["C", ""], ["C", "A"], ["T", ""], ["A", ""]])
# gt[:,1]
# gt[:,2]
# gt[:,3]
for i in range(3):

# Combinations of alleles
np.array(np.meshgrid(['A'], ['A', 'T'], ['C', 'G'])).T.reshape(-1,3)
array([['A', 'A', 'C'],
       ['A', 'T', 'C'],
       ['A', 'A', 'G'],
       ['A', 'T', 'G']], dtype='<U1')

# as list?
[''.join(row) for row in np.array(np.meshgrid(['A'], ['A', 'T'], ['C', 'G'])).T.reshape(-1,3)]
['AAC', 'ATC', 'AAG', 'ATG']

AMINOACID_BY_CODON = {
'TTT': 'F', 'TTC': 'F', 'TTA': 'L', 'TTG': 'L',
'TCT': 'S', 'TCC': 'S', 'TCA': 'S', 'TCG': 'S',
'TAT': 'Y', 'TAC': 'Y', 'TAA': 'X', 'TAG': 'X',
'TGT': 'C', 'TGC': 'C', 'TGA': 'X', 'TGG': 'W',
'CTT': 'L', 'CTC': 'L', 'CTA': 'L', 'CTG': 'L',
'CCT': 'P', 'CCC': 'P', 'CCA': 'P', 'CCG': 'P',
'CAT': 'H', 'CAC': 'H', 'CAA': 'Q', 'CAG': 'Q',
'CGT': 'R', 'CGC': 'R', 'CGA': 'R', 'CGG': 'R',
'ATT': 'I', 'ATC': 'I', 'ATA': 'I', 'ATG': 'M',
'ACT': 'T', 'ACC': 'T', 'ACA': 'T', 'ACG': 'T',
'AAT': 'N', 'AAC': 'N', 'AAA': 'K', 'AAG': 'K',
'AGT': 'S', 'AGC': 'S', 'AGA': 'R', 'AGG': 'R',
'GTT': 'V', 'GTC': 'V', 'GTA': 'V', 'GTG': 'V',
'GCT': 'A', 'GCC': 'A', 'GCA': 'A', 'GCG': 'A',
'GAT': 'D', 'GAC': 'D', 'GAA': 'E', 'GAG': 'E',
'GGT': 'G', 'GGC': 'G', 'GGA': 'G', 'GGG': 'G'
}
CODON_DEGENERACY_BY_CODON = {
'TTT': '002', 'TTC': '002', 'TTA': '202', 'TTG': '202', 
'TCT': '004', 'TCC': '004', 'TCA': '004', 'TCG': '004', 
'TAT': '002', 'TAC': '002', 'TAA': '022', 'TAG': '002', 
'TGT': '002', 'TGC': '002', 'TGA': '020', 'TGG': '000', 
'CTT': '004', 'CTC': '004', 'CTA': '204', 'CTG': '204', 
'CCT': '004', 'CCC': '004', 'CCA': '004', 'CCG': '004', 
'CAT': '002', 'CAC': '002', 'CAA': '002', 'CAG': '002', 
'CGT': '004', 'CGC': '004', 'CGA': '204', 'CGG': '204', 
'ATT': '003', 'ATC': '003', 'ATA': '003', 'ATG': '000', 
'ACT': '004', 'ACC': '004', 'ACA': '004', 'ACG': '004', 
'AAT': '002', 'AAC': '002', 'AAA': '002', 'AAG': '002', 
'AGT': '002', 'AGC': '002', 'AGA': '202', 'AGG': '202', 
'GTT': '004', 'GTC': '004', 'GTA': '004', 'GTG': '004', 
'GCT': '004', 'GCC': '004', 'GCA': '004', 'GCG': '004', 
'GAT': '002', 'GAC': '002', 'GAA': '002', 'GAG': '002', 
'GGT': '004', 'GGC': '004', 'GGA': '004', 'GGG': '004'
} 


##############################################################

import numpy as np
import itertools
# degeneracy string based on three lists
def degeneracy(array):
    #print('array', array)
    AA = [AMINOACID_BY_CODON.get(''.join(row)) for row in array]
    #print('AA', AA)
    DEG = [CODON_DEGENERACY_BY_CODON.get(''.join(row)) for row in array]
    #print('DEG', DEG)
    return ["|".join(set(["_".join(x) for x in itertools.zip_longest(itertools.chain.from_iterable([[A]*3 for A in AA]), itertools.chain.from_iterable(DEG))][z::3])) for z in range(3)]
for idx in len(transcript)
degeneracy(list(filter(lambda codon: len (codon) == 3, ["".join(x) for x in itertools.product(*result[0:3])])))

def degeneracy(array):
    #print('array', array)
    AA = list([AMINOACID_BY_CODON[''.join(row)] for row in array])
    #print('AA', AA)
    DEG = list([CODON_DEGENERACY_BY_CODON[''.join(row)] for row in array])
    #print('DEG', DEG)
    return ["|".join(set(["_".join(x) for x in itertools.zip_longest(itertools.chain.from_iterable([[A]*3 for A in AA]), itertools.chain.from_iterable(DEG))][z::3])) for z in range(3)]
alleles = [['T'], ['T'], ['C', 'G']]
degeneracy(np.array(np.meshgrid(*alleles)).T.reshape(-1,3))

# simulate all allele combinations (just for testing)
def powerset(iterable, sockets):
    s = list(iterable)
    return [list(x) for x in itertools.chain.from_iterable(itertools.combinations(s, r) for r in range(1, len(s)+1))]
for z in [list(x) for x in itertools.combinations_with_replacement(powerset(['A', 'T', 'G', 'C'], 3),3)]:
    degeneracy(np.array(np.meshgrid(*z)).T.reshape(-1,3))

# data
pos = np.array([4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16])
gt_pos = np.array([5, 9, 11, 15, 16])
import allel
genotype = allel.GenotypeArray([
    [[0,0], [0,1], [1,1]],
    [[1,1], [0,1], [0,0]],
    [[1,1], [0,1], [2,2]],
    [[1,1], [1,1], [0,0]],
    [[1,1], [0,0], [-1,-1]]])
ref = np.array(list('ATGGG'))     
#                               111111
#                         456789123456    
sequence = np.array(list('AAGTGTGACGGG'))
alt = np.array([["G", ""], ["C", ""], ["C", "A"], ["T", ""], ["A", ""]])
alleles = np.column_stack([ref, alt])
alleles
array([['A', 'G', ''],
       ['T', 'C', ''],
       ['G', 'C', 'A'],
       ['G', 'T', ''],
       ['G', 'A', '']], dtype='<U1')
alleles[np.arange(genotype.shape[0]), genotype[:,2][:,0]]
array(['G', 'T', 'A', 'G', 'G'], dtype='<U1')
alleles[np.arange(genotype.shape[0]), genotype[:,1][:,1]]
array(['G', 'C', 'C', 'T', 'G'], dtype='<U1')

mask_A = np.isin(pos, gt_pos)
mask_B = ~mask_A

variants = np.vstack([alleles[np.arange(genotype.shape[0]), genotype[:,1][:,0]], alleles[np.arange(genotype.shape[0]), genotype[:,1][:,1]]]).T
array([['A', 'G'],
       ['T', 'C'],
       ['G', 'C'],
       ['T', 'T'],
       ['G', 'G']], dtype='<U1')

result = np.full((sequence.shape[0], variants.shape[1]), '')
result[mask_A] = variants
result[mask_B,0] = sequence[mask_B]


result = np.array([['A', ''],
                ['A', 'G'],
                ['G', ''],
                ['T', ''],
                ['G', ''],
                ['T', 'C'],
                ['G', 'C'],
                ['A', ''],
                ['C', ''],
                ['G', ''],
                ['T', 'A'],
                ['G', 'G']], dtype='<U1')

degeneracy(np.array(np.meshgrid(*results).T[:3])).T.reshape(-1,3))

degeneracy(np.array(np.meshgrid(*np.vstack([alleles[np.arange(genotype.shape[0]), genotype[:,0][:,0]], alleles[np.arange(genotype.shape[0]), genotype[:,0][:,1]]]).T[:3])).T.reshape(-1,3))




degeneracy(np.array(np.meshgrid(*np.vstack([alleles[np.arange(genotype.shape[0]), genotype[:,0][:,0]], alleles[np.arange(genotype.shape[0]), genotype[:,0][:,1]]]).T[:3])).T.reshape(-1,3))
['T_0', 'T_0', 'T_4']

#########################################################

# distinction VARs/INVARs
np.where(np.isin(pos, gt_pos), 'VAR', 'INVAR').reshape(-1,3)
array([['INVAR', 'VAR', 'INVAR'],
       ['INVAR', 'INVAR', 'VAR'],
       ['VAR', 'INVAR', 'INVAR'],
       ['INVAR', 'VAR', 'VAR']], dtype='<U5')

np.where(np.isin(pos, gt_pos), '', sequence)

# VARs
for idx in range(3):
    print("# sample: %s" % idx)
    gt = genotype[:,idx]
    print(gt)
    np.where(
        np.where(
            np.isin(gt_pos, pos), 
            np.where(
                gt.is_missing(), 'MISS', 
                np.where(
                    gt.is_het(), 'HET', 
                    np.where(
                        gt.is_hom_alt(), 'HOMALT', 
                        np.where(
                            gt.is_hom_ref(), "HOMREF", 
                            'HOMREF')))), 
            'INVAR'),
        'INVAR')



np.where(np.isin(pos, gt_pos), alt[np.isin(pos, gt_pos)], ref[~np.isin(pos, gt_pos)])

np.where(np.isin(pos, gt_pos), 
    )


np.where(gt[:,1].is_missing(), )

np.where(gt.is_missing(), 'MISS', 'NOMISS')

MISS ('MISS',)
HOMREF ('HOMREF',)
NOT HET ('HOMALT',)
HET ('HET',)
MISS ('MISS', 'MISS')
MISS ('MISS', 'HOMREF')
MISS ('MISS', 'HOMALT')
MISS ('MISS', 'HET')
HOMREF ('HOMREF', 'HOMREF')
NOT HET ('HOMREF', 'HOMALT')
HET ('HOMREF', 'HET')
NOT HET ('HOMALT', 'HOMALT')
HET ('HOMALT', 'HET')
HET ('HET', 'HET')
MISS ('MISS', 'MISS', 'MISS')
MISS ('MISS', 'MISS', 'HOMREF')
MISS ('MISS', 'MISS', 'HOMALT')
MISS ('MISS', 'MISS', 'HET')
MISS ('MISS', 'HOMREF', 'HOMREF')
MISS ('MISS', 'HOMREF', 'HOMALT')
MISS ('MISS', 'HOMREF', 'HET')
MISS ('MISS', 'HOMALT', 'HOMALT')
MISS ('MISS', 'HOMALT', 'HET')
MISS ('MISS', 'HET', 'HET')
HOMREF ('HOMREF', 'HOMREF', 'HOMREF')
NOT HET ('HOMREF', 'HOMREF', 'HOMALT')
HET ('HOMREF', 'HOMREF', 'HET')
NOT HET ('HOMREF', 'HOMALT', 'HOMALT')
HET ('HOMREF', 'HOMALT', 'HET')
HET ('HOMREF', 'HET', 'HET')
NOT HET ('HOMALT', 'HOMALT', 'HOMALT')
HET ('HOMALT', 'HOMALT', 'HET')
HET ('HOMALT', 'HET', 'HET')
HET ('HET', 'HET', 'HET')


    #sequence_ids = []
    #start_arrays = []
    #end_arrays = []
    #degeneracy_arrays = []
    #site_counts = []
    #for transcriptObj in tqdm(transcriptObjs, total=len(transcriptObjs), desc="[%] Estimating datastructure... ", ncols=150):
    #    start_arrays.append(transcriptObj.positions)
    #    end_arrays.append(transcriptObj.positions+1)
    #    site_counts.append(transcriptObj.positions.shape[0])
    #    sequence_ids.append(transcriptObj.sequence_id)
    #    #print(transcriptObj.transcript_id, transcriptObj.degeneracy)
    #    degeneracy_arrays.append(transcriptObj.degeneracy)
    #print("[+] Sites %s" % sum(site_counts))
    ##print(degeneracy_arrays)
    #df_by_sample = {}
    #for sample in tqdm(samples, total=len(samples), desc="[%] Creating datastructure... ", ncols=150):
    #    a = np.concatenate([np.tile(sequence_id, site_count) for sequence_id, site_count in zip(sequence_ids, site_counts)])
    #    b = np.concatenate(start_arrays)
    #    c = np.concatenate(end_arrays)
    #    d = np.concatenate(degeneracy_arrays)
    #    data = np.vstack([
    #        np.concatenate([np.tile(sequence_id, site_count) for sequence_id, site_count in zip(sequence_ids, site_counts)]),
    #        np.concatenate(start_arrays),
    #        np.concatenate(end_arrays),
    #        np.concatenate(degeneracy_arrays)
    #    ]).T
#
    #    df_by_sample[sample] = pd.DataFrame(data=data, columns=['sequence_id', 'start', 'end', 'degeneracy'])
    #    # np.vstack([np.concatenate([np.tile(seq, pos).T for seq, pos in zip(['c', 'd', 'a'], [1,5,12])]), np.arange(18)]).T
    #    # df = pd.DataFrame([
    #    #     np.vstack([np.tile(seq, pos).T for seq, pos in zip(['c', 'd', 'a'], [1,5,12])]), 
    #    #     np.arange(18)], 
    #    #     columns=['sequence_id', 'start'])
    #    # print('# sample', sample)
    #    #df = np.fill(())
    #    #write_df(df, out_f='', sep='\t', header=True, status=True):
#
    #data = np.vstack([
    #        np.concatenate([np.tile(sequence_id, site_count) for sequence_id, site_count in zip(sequence_ids, site_counts)]),
    #        np.concatenate(start_arrays),
    #        np.concatenate(end_arrays),
    #        np.concatenate(degeneracy_arrays)
    #    ]).T
    #


    #for x in ittrtools.zip_longest(itertools.chain.from_iterable([[A]*3 for A in AA]), itertools.chain.from_iterable(DEG))][z::3]))
    #return ["|".join(sorted(set(["_".join(x) for x, (degs) in itertools.zip_longest(AA, zip(*DEG))])))]
    #return ["|".join(sorted(set(["_".join(x) for x in itertools.zip_longest(itertools.chain.from_iterable([[A]*3 for A in AA]), itertools.chain.from_iterable(DEG))][z::3]))) for z in range(3)]